#### PROJECT SETTINGS ####
# The name of the executable to be created
BIN_NAME := foo
# Compiler used
CXX = g++
CC = gcc
ifneq ($(CROSS_COMPILE),)
$(info Using cross compiler [${CROSS_COMPILE}])
CXX = $(CROSS_COMPILE)-g++
CC = $(CROSS_COMPILE)-gcc
LD = $(CROSS_COMPILE)-ld
AR = $(CROSS_COMPILE)-ar
endif
# Extension of source files used in the project
#SRC_EXT = cpp
SRC_EXT = c

ifeq ($(SRC_EXT),c)
BCC = $(CC)
endif
ifeq ($(SRC_EXT),cpp)
BCC = $(CXX)
endif

#$(info $$BCC is [${BCC}])
#$(info $$CXX is [${CXX}])
#$(info $$CC is [${CC}])


# ASTYLE command for 'make format_source' target
ASTYLE=astyle -vjA10 -n -D --indent=spaces=2

# for linux kernel formating
#ASTYLE=astyle -vjA8

#for k&r formating
#ASTYLE=astyle -vjA3

#no formating tool
#ASTYLE = 

# Path to the source directory, relative to the makefile
SRC_PATH = .
# Files for creating libraries ( without main.c)
LIB_FILES = 
ifneq ($(LIB_FILES),)

# General compiler flags
#COMPILE_FLAGS = -std=c++11 -Wall -Wextra
COMPILE_FLAGS = -Wall -Wextra
# Additional release-specific flags
RCOMPILE_FLAGS = -D NDEBUG
# Additional debug-specific flags
DCOMPILE_FLAGS = -g 
# Add additional include paths
INCLUDES = -I $(SRC_PATH)/
# General linker settings
LINK_FLAGS = 
# Additional release-specific linker settings
RLINK_FLAGS = 
# Additional debug-specific linker settings
DLINK_FLAGS = 

ifneq ($(DESTDIR),)
# Destination directory, like a jail or mounted system
DESTDIR = /
endif

ifeq ($(INSTALL_PREFIX),)
# Install path (bin/ is appended automatically)
#INSTALL_PREFIX = usr/local
INSTALL_PREFIX = `pwd`
endif

#### END PROJECT SETTINGS ####

# Generally should not need to edit below this line

# Verbose option, to output compile and link commands
export V = false
export CMD_PREFIX = @
ifeq ($(V),true)
	CMD_PREFIX = 
endif
ifeq ($(VERBOSE),1)
	CMD_PREFIX = 
endif

# Combine compiler and linker flags
release: export CXXFLAGS := $(CXXFLAGS) $(COMPILE_FLAGS) $(RCOMPILE_FLAGS)
release: export LDFLAGS := $(LDFLAGS) $(LINK_FLAGS) $(RLINK_FLAGS)
debug: export CXXFLAGS := $(CXXFLAGS) $(COMPILE_FLAGS) $(DCOMPILE_FLAGS)
debug: export LDFLAGS := $(LDFLAGS) $(LINK_FLAGS) $(DLINK_FLAGS)

# Build and output paths
release: export BUILD_PATH := build
release: export BIN_PATH := bin
debug: export BUILD_PATH := build
debug: export BIN_PATH := bin
install: export BIN_PATH := bin

# Find all source files in the source directory
SOURCES = $(shell find $(SRC_PATH)/ -name '*.$(SRC_EXT)')

ifneq ($(LIB_FILES),)
LIB_INCLUDE_FILES = $(shell find $(SRC_PATH)/ -name '*.h')
endif

# Set the object file names, with the source directory stripped
# from the path, and the build path prepended in its place
OBJECTS = $(SOURCES:$(SRC_PATH)/%.$(SRC_EXT)=$(BUILD_PATH)/%.o)
# Set the dependency files that will be used to add header dependencies
DEPS = $(OBJECTS:.o=.d)

# Macros for timing compilation
TIME_FILE = $(dir $@).$(notdir $@)_time
START_TIME = date '+%s' > $(TIME_FILE)
END_TIME = read st < $(TIME_FILE) ; \
	$(RM) $(TIME_FILE) ; \
	st=$$((`date '+%s'` - $$st - 86400)) ; \
	echo `date -u -d @$$st '+%H:%M:%S'` 

# Version macros
# Comment/remove this section to remove versioning
#VERSION := $(shell git describe --tags --long --dirty --always | \
	sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)-\?.*-\([0-9]*\)-\(.*\)/\1 \2 \3 \4 \5/g')
VERSION_MAJOR := 0
VERSION_MINOR := 0
VERSION_PATCH := 0
VERSION_REVISION := 0
#VERSION_MAJOR := $(word 1, $(VERSION))
#VERSION_MINOR := $(word 2, $(VERSION))
#VERSION_PATCH := $(word 3, $(VERSION))
#VERSION_REVISION := $(word 4, $(VERSION))
#VERSION_HASH := $(word 5, $(VERSION))
#VERSION_STRING := \
	"$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH).$(VERSION_REVISION)"
#override CXXFLAGS := $(CXXFLAGS) \
	-D VERSION_MAJOR=$(VERSION_MAJOR) \
	-D VERSION_MINOR=$(VERSION_MINOR) \
	-D VERSION_PATCH=$(VERSION_PATCH) \
	-D VERSION_REVISION=$(VERSION_REVISION) \
	-D VERSION_HASH=\"$(VERSION_HASH)\"

# Standard, non-optimized release build
.PHONY: release
release: dirs
	@echo "Beginning release build v$(VERSION_STRING)"
	@$(START_TIME)
	$(CMD_PREFIX)$(MAKE) all --no-print-directory
	@echo -n "Total build time: "
	@$(END_TIME)

# Debug build for gdb debugging
.PHONY: debug
debug: dirs
	@echo "Beginning debug build v$(VERSION_STRING)"
	@$(START_TIME)
	$(CMD_PREFIX)$(MAKE) all --no-print-directory
	@echo -n "Total build time: "
	@$(END_TIME)

# Create the directories used in the build
.PHONY: dirs
dirs:
	@echo "Creating directories"
	$(CMD_PREFIX)mkdir -p $(dir $(OBJECTS))
	$(CMD_PREFIX)mkdir -p $(BIN_PATH)
ifneq ($(LIB_FILES),)
	$(CMD_PREFIX)mkdir -p $(DESTDIR)$(INSTALL_PREFIX)/include
endif

# Installs to the set path
.PHONY: install
install:
	@echo "Running make install"
	@echo "Installing to $(DESTDIR)$(INSTALL_PREFIX)/bin"
	$(CMD_PREFIX)install -m 0755 $(BIN_PATH)/$(BIN_NAME) $(DESTDIR)$(INSTALL_PREFIX)/bin

# Removes all build files
.PHONY: clean
clean:
	@echo "Deleting $(BIN_NAME) symlink"
	$(CMD_PREFIX)$(RM) $(BIN_NAME)
	@echo "Deleting directories"
	$(CMD_PREFIX)$(RM) -r build
	$(CMD_PREFIX)$(RM) -r bin
ifneq ($(LIB_FILES),)
	$(CMD_PREFIX)$(RM) -rf lib include
	$(CMD_PREFIX)$(RM) $(BIN_NAME).a $(BIN_NAME).so.o
endif
	
ifneq ($(LIB_FILES),)
lib: $(BIN_NAME).a
	@echo "installing $(BIN_NAME).a $(BIN_NAME).so.o in $(DESTDIR)$(INSTALL_PREFIX)/lib"
	$(CMD_PREFIX)mkdir -p $(DESTDIR)$(INSTALL_PREFIX)/lib
	$(CMD_PREFIX)install -m 0755 $(BIN_NAME).a $(BIN_NAME).so.o $(DESTDIR)$(INSTALL_PREFIX)/lib
#	$(CMD_PREFIX)mv $(DESTDIR)$(INSTALL_PREFIX)/lib/$(BIN_NAME).so.o $(DESTDIR)$(INSTALL_PREFIX)/lib/$(BIN_NAME).$(VERSION_MAJOR).$(VERSION_MINOR).so.o
	$(CMD_PREFIX)$(RM) $(BIN_NAME).a
	$(CMD_PREFIX)$(RM) -f $(BIN_NAME).so.o
	@echo "Installing $(LIB_INCLUDE_FILES) to $(DESTDIR)$(INSTALL_PREFIX)/include"
	$(CMD_PREFIX)install -m 0644 $(LIB_INCLUDE_FILES) $(DESTDIR)$(INSTALL_PREFIX)/include
	
$(BIN_NAME).a: $(BIN_NAME).so.o
	@echo "creating static lib $@"
	$(CMD_PREFIX)$(AR) rcs $@ $^

$(BIN_NAME).so.o: $(LIB_FILES)
	@echo "creating dynamic lib $@"
#	gcc -c -o $@ $<
	$(CMD_PREFIX)$(BCC) $(CXXFLAGS) $(INCLUDES) -fPIC -c -o $@ $<
endif

# Main rule, checks the executable and symlinks to the output
ifneq ($(LIB_FILES),)
all: $(BIN_PATH)/$(BIN_NAME) lib
else
all: $(BIN_PATH)/$(BIN_NAME)
endif
	@echo "Making symlink: $(BIN_NAME) -> $<"
	$(CMD_PREFIX)$(RM) $(BIN_NAME)
	$(CMD_PREFIX)ln -s $(BIN_PATH)/$(BIN_NAME) $(BIN_NAME)

# Link the executable
$(BIN_PATH)/$(BIN_NAME): $(OBJECTS)
	@echo "Linking: $@"
	@$(START_TIME)
	$(CMD_PREFIX)$(BCC) $(OBJECTS) $(LDFLAGS) -o $@
	@echo -en "\t Link time: "
	@$(END_TIME)

# Add dependency files, if they exist
-include $(DEPS)

# Source file rules
# After the first compilation they will be joined with the rules from the
# dependency files to provide header dependencies
$(BUILD_PATH)/%.o: $(SRC_PATH)/%.$(SRC_EXT)
	@echo "Compiling: $< -> $@"
	@$(START_TIME)
	$(CMD_PREFIX)$(BCC) $(CXXFLAGS) $(INCLUDES) -MP -MMD -c $< -o $@
	@echo -en "\t Compile time: "
	@$(END_TIME)

format_source: $(SOURCES) $(LIB_INCLUDE_FILES)
ifneq ($(ASTYLE),)
	@echo "Running: $(ASTYLE) $(SOURCES) $(LIB_INCLUDE_FILES)"
#	@astyle -vjA10 -D --indent=spaces=2 $(SOURCES) $(LIB_INCLUDE_FILES)
	$(CMD_PREFIX)$(ASTYLE) $(SOURCES) $(LIB_INCLUDE_FILES)
else
	@echo "no code formating tool found"
endif

format: format_source
