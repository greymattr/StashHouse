" Basic options
set nocompatible

set smartindent

set showmatch
set incsearch

" do not keep a backup file
set nobackup
set nowb
set noswapfile

" wrap off
set nowrap

" tabs are only 2 characters
set tabstop=2

" auto indent uses 2 charaters
set shiftwidth=2

" spaces instead of tabs
set expandtab

" set auto-indentation on
set autoindent

" show line numbers
set number
set ruler

" fold using markers
set foldmethod=marker

" powerful backspaces
set backspace=indent,eol,start

" highlight search terms
set hlsearch

" set hidden
set hidden

" paste doesn't reformat with comments and indentation
" paste also breaks snippets from being completed with the TAB key so :set nopaste if you need those to work
set paste

" dont wrap words
set textwidth=0

" history
set history=50

" 1000 undo levels
set undolevels=1000

" show partial commands
set showcmd

" show matching braces
set showmatch

" new splits start on the right
set splitright

" Start scrolling at this number of lines from the bottom.
set scrolloff=2

" Start scrolling horizontally at this number of columns.
set sidescrolloff=5

" Status line takes up this many lines.
" Make the status line always visible.
set laststatus=2

" highlight the current line that the cursor is on
set cursorline
highlight Cursorline term=bold cterm=bold guibg=Grey90


" Enable the mouse.
set mouse=a

" Hide the mouse while typing.
set mousehide

" Enable the popup menu.
set mousem=popup

" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2

" copy stuff to and from system clipboard
set clipboard=unnamedplus

" auto-detect the file type
filetype plugin indent on
filetype plugin on

" on the syntax by default
if has("syntax")
syntax on
endif

set wildmenu
" C/C++
au BufNewFile,BufRead *.c,*.cc,*.h,*.cpp,*.hpp,*.cxx setlocal cindent
au BufNewFile,BufRead *.c,*.cc,*.h,*.cpp,*.hpp,*.cxx setlocal comments=
au BufNewFile,BufRead *.c,*.cc,*.h,*.cpp,*.hpp,*.cxx setlocal et

"autocmd BufNewFile  ?akefile*      0r ~/.vim/templates/Makefile.simple
"autocmd BufNewFile  ?akefile*      0r ~/.vim/templates/Makefile.medium
autocmd BufNewFile  ?akefile*      0r ~/.vim/templates/Makefile.complete
autocmd BufNewFile  main.c         0r ~/.vim/templates/main.c
"autocmd BufNewFile  *.c            0r ~/.vim/templates/source_basic.c
"autocmd BufNewFile  *.h            0r ~/.vim/templates/header_basic.h 
autocmd BufNewFile  *.sh           0r ~/.vim/templates/shell_script.sh

autocmd BufNewFile  *.h call s:template_keywords() 
function! s:template_keywords() 
	0r ~/.vim/templates/header_basic.h
	%s/HEADER_FILE/\=toupper(expand('%:r'))/g 
	%s/DATE/\=strftime('%Y-%m-%d')/g 
	" And more... 
endfunction

"autocmd BufNewFile  *.cgi call s:template_keywords() 
"function! s:template_keywords() 
"	0r ~/.vim/templates/shell_cgi.cgi
"	%s//home/matthewf/.vimrc/\=expand('%')/g 
"	" And more... 
"endfunction

set ofu=syntaxcomplete#Complete

" Plugins
call plug#begin()

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'ap/vim-buftabline'
Plug '0xStabby/chatgpt-vim'
"Plug 'voldikss/vim-floaterm'
"Plug 'CoderCookE/vim-chatgpt'
Plug 'jakeroggenbuck/journal.vim'
Plug 'normen/vim-pio'
"Plug 'JBakamovic/cxxd-vim'
"Plug 'JBakamovic/yaflandia'
Plug 'ErikBjare/gptme', { 'rtp': 'scripts/vim' }

call plug#end()

set guifont=Fira\ Code\ Retina\ 13

"colorscheme darkblue

if has('gui_running')
  au VimEnter * colorscheme evening
endif

" quick buffer controls \n \p \d next, prev, delete
" <leader>=\ 
map <leader>n :bnext<cr>
map <leader>p :bprevious<cr>
map <leader>d :bdelete<cr>

" quick buffers controls with CTRL x, CTRL z, CTRL d
map <C-x> :bnext<CR>
map <C-z> :bprev<CR>
map <C-d> :bdelete<CR>

" random remaps
nmap <F7> :bo term ++rows=10<CR>
nnoremap <F5> :buffers<CR>:buffer<Space>
" CTRL-s saves
map <C-S> :w!<CR>

"CTRL p sets nopaste mode
map <C-p> :set nopaste<CR>

" plugin buftabline options
let g:buftabline_indicators = 1

map <C-n> :NERDTreeToggle<CR>

" Serch word under cursor in current dir
map <C-F> <esc>:Grep<CR>

" ctrl m runs make
nnoremap <C-m> :make<CR>

" make CTRL-W o close the current buffer, but create new buffer window
" CTRL-W w moves between windows
map <C-W>o <C-W>n<C-W><C-W><C-W>c

"command Cfmt !/usr/bin/astyle -vjA10 -D --indent=spaces=2

"set runtimepath^=~/.vim/bundle/*/
let g:bufExplorerSplitRight=0        " Split left

let g:journals_directory = "/home/matthewf/werk/journals"

" tagbar options
nnoremap :tags  :Tagbar
nmap <F4> :TagbarToggle<CR>
let g:tagbar_autoclose = 1
let g:tagbar_width = 30
let g:tagbar_indent = 1
let g:tagbar_show_linenumbers = 1
let g:tagbar_show_tag_linenumbers = 2
let g:tagbar_left = 1

" buffergator options
nmap <C-b> :BuffergatorToggle<CR>
let g:buffergator_vsplit_size = 30
let g:buffergator_autodismiss_on_select = 0

nnoremap :Cfmt     :!astyle -vjA10 -D --indent=spaces=2 %

nnoremap :EXIT   :qall!

" netrw filemanager settings
" open file in horizantel split
" let g:netrw_browse_split = 1
" open files in verticle split
" let g:netrw_browse_split = 2
" open files in new tab
" let g:netrw_browse_split = 3
" open files in previous window
let g:netrw_browse_split = 4
let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_winsize = 15
" uncomment below lines to open netrw when vim is started
" augroup ProjectDrawer
"  autocmd!
"  autocmd VimEnter * :Vexplore
"augroup END

"let g:DoxygenToolkit_briefTag_pre="@Synopsis  "
"let g:DoxygenToolkit_paramTag_pre="@Param "
"let g:DoxygenToolkit_returnTag="@Returns   "
"let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
"let g:DoxygenToolkit_blockFooter="----------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName="Matthew Fatheree"

let g:clang_library_path = "/usr/lib/llvm-6.0/lib/"

" don't suto fold lines in vimdiff
if &diff                               " only for diff mode/vimdiff
    set diffopt=filler,context:1000000 " filler is default and inserts empty lines for sync
endif

" anything after col 80 will be highlighted
" highlight rightMargin ctermfg=lightblue
" match rightMargin /.\%>79v/


"set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v

"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]\ F4-Tagbar\ F7-Term\ CTRL-b(uffers)\ CTRL-n(erdtree)\ %{FugitiveStatusline()}

